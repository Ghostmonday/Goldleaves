name: Block merge conflict markers

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Enable verbose output'
        required: false
        default: 'false'

permissions:
  contents: read
  pull-requests: write  # For PR comments

concurrency:
  group: conflict-scan-${{ github.ref }}
  cancel-in-progress: true

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Configure scanner
        id: config
        shell: bash
        run: |
          # Define patterns to exclude (binary files, generated code, etc.)
          cat > .scan-exclude << 'EOF'
          .git
          node_modules
          .venv
          __pycache__
          *.pyc
          build
          dist
          artifacts
          .quarantine
          vendor
          coverage
          *.min.js
          *.min.css
          package-lock.json
          yarn.lock
          poetry.lock
          Pipfile.lock
          *.png
          *.jpg
          *.jpeg
          *.gif
          *.webp
          *.svg
          *.pdf
          *.zip
          *.tar
          *.gz
          *.bin
          *.exe
          *.dll
          *.so
          *.dylib
          *.ico
          *.woff
          *.woff2
          *.ttf
          *.eot
          EOF
          
          # Build exclude args for git grep
          EXCLUDES=""
          while IFS= read -r pattern; do
            [ -z "$pattern" ] && continue
            EXCLUDES="$EXCLUDES ':!$pattern'"
          done < .scan-exclude
          echo "excludes=$EXCLUDES" >> $GITHUB_OUTPUT
          
      - name: Scan for conflict markers
        id: scan
        shell: bash
        run: |
          set -euo pipefail
          
          echo "üîç Scanning for merge conflict markers..."
          echo "================================================"
          
          # Define conflict patterns
          PATTERNS=(
            '^<<<<<<<[[:space:]]'  # Start conflict marker
            '^=======$'            # Middle conflict marker
            '^>>>>>>>[[:space:]]'  # End conflict marker
            '^<<<<<<< HEAD'        # Common HEAD marker
            '^>>>>>>> [a-f0-9]{7}' # Common commit SHA marker
          )
          
          # Combine patterns
          PATTERN_REGEX=$(IFS='|'; echo "${PATTERNS[*]}")
          
          # Run scan
          set +e
          RESULTS=$(git grep -n -E "$PATTERN_REGEX" -- . ${{ steps.config.outputs.excludes }} 2>/dev/null)
          GREP_RC=$?
          set -e
          
          if [ $GREP_RC -eq 0 ]; then
            echo "‚ùå CONFLICT MARKERS FOUND:"
            echo "================================================"
            echo "$RESULTS"
            echo "================================================"
            
            # Format for GitHub annotation
            while IFS=: read -r file line content; do
              # Escape special characters for GitHub
              content_escaped=$(echo "$content" | sed 's/</\&lt;/g; s/>/\&gt;/g')
              echo "::error file=$file,line=$line::Conflict marker: $content_escaped"
            done <<< "$RESULTS"
            
            # Save results for PR comment
            {
              echo "results<<EOF"
              echo "$RESULTS"
              echo "EOF"
            } >> $GITHUB_OUTPUT
            
            # Count affected files
            AFFECTED_FILES=$(echo "$RESULTS" | cut -d: -f1 | sort -u | wc -l)
            TOTAL_MARKERS=$(echo "$RESULTS" | wc -l)
            
            echo "affected_files=$AFFECTED_FILES" >> $GITHUB_OUTPUT
            echo "total_markers=$TOTAL_MARKERS" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
            
            exit 1
            
          elif [ $GREP_RC -eq 1 ]; then
            echo "‚úÖ No conflict markers found!"
            echo "found=false" >> $GITHUB_OUTPUT
            exit 0
            
          else
            echo "::error::Scanner encountered an error (exit code: $GREP_RC)"
            exit 2
          fi
          
      - name: Comment on PR
        if: failure() && github.event_name == 'pull_request' && steps.scan.outputs.found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const results = `${{ steps.scan.outputs.results }}`;
            const affectedFiles = ${{ steps.scan.outputs.affected_files }};
            const totalMarkers = ${{ steps.scan.outputs.total_markers }};
            
            // Format results as markdown table
            const lines = results.split('\n').filter(l => l);
            let table = '| File | Line | Content |\n|------|------|---------|';
            
            for (const line of lines) {
              const [file, lineNo, ...contentParts] = line.split(':');
              const content = contentParts.join(':').trim();
              // Escape markdown special chars
              const escapedContent = content
                .replace(/\|/g, '\\|')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .substring(0, 50) + (content.length > 50 ? '...' : '');
              
              table += `\n| \`${file}\` | ${lineNo} | \`${escapedContent}\` |`;
            }
            
            const body = `## ‚ö†Ô∏è Merge Conflict Markers Detected
            
            Found **${totalMarkers}** conflict marker(s) in **${affectedFiles}** file(s).
            
            ${table}
            
            ### How to fix:
            1. Pull the latest changes from the base branch
            2. Resolve all conflicts in your editor
            3. Remove all conflict markers (\`<<<<<<<\`, \`=======\`, \`>>>>>>>\`)
            4. Test your changes
            5. Commit and push the resolved files
            
            <details>
            <summary>Need help resolving conflicts?</summary>
            
            \`\`\`bash
            # Update your branch with the base branch
            git fetch origin
            git merge origin/${{ github.base_ref }}
            
            # Or rebase if you prefer
            git rebase origin/${{ github.base_ref }}
            
            # After resolving conflicts
            git add .
            git commit
            git push
            \`\`\`
            </details>`;
            
            // Check for existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Merge Conflict Markers Detected')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
            
      - name: Clean success comment
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Remove conflict marker comment if conflicts are resolved
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Merge Conflict Markers Detected')
            );
            
            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
